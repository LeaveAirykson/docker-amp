#!/bin/bash
set -e

damp_rootdir="$(dirname "$(readlink -f "$0")")"
cmd="$1"
colsep="%"

c_yellow="\033[1;33m"
c_green="\033[1;32m"
c_reset="\033[0m"
c_red="\033[0;31m"

function setup {
    read -rep "Root directory for damp ($damp_rootdir): " rootdir

    rootdir=${rootdir:="$damp_rootdir"}
    rootdir=${rootdir/"~"/"$HOME"}

    echo -e "\n${c_yellow}Setup damp in: $rootdir${c_reset}"

    mkdir -vp "$rootdir/log/mysql"
    mkdir -vp "$rootdir/log/apache"
    mkdir -vp "$rootdir/mysql"
    mkdir -vp "$rootdir/vhost"
    mkdir -vp "$rootdir/www"

    echo -e "${c_green}Damp setup finished!${c_reset}\n"
}

function up {
    cd "$damp_rootdir" && docker compose up -d
}

function down {
    cd "$damp_rootdir" && docker compose down
}

function addvhost {
    projectname="$1"

    while [[ $projectname = "" ]]; do
        read -rep "Project name: " projectname
    done

    projectname=${projectname,,}
    project_conf="$damp_rootdir/vhost/$projectname.conf"
    project_dir="$damp_rootdir/www/$projectname"

    if [ -f "$project_conf" ]; then
        echo -e "${c_red}A project with the given name already exists!${c_reset}"
        exit 0
    fi

    read -rep "ServerName ($projectname.dev): " domain
    domain=${domain:="$projectname.dev"}

    read -rep "DocumentRoot (relative path): " docroot

    if [[ -n "$docroot" ]] && [[ $docroot != /* ]]; then
        docroot="/$docroot"
    fi

    project_docroot="$project_dir$docroot"

    echo -e "\n${c_yellow}this will create the following vhost:${c_reset}"
    content="Project:${colsep}$projectname${colsep}"
    content+="\nServerName:${colsep}$domain${colsep}"
    content+="\nDirectory:${colsep}$project_docroot${colsep}"

    echo -e "$content" | column -t -s "$colsep"

    echo ""

    while [[ -z "$consent" ]]; do
        read -rep "Proceed? (y/n): " consent
    done

    echo ""

    consent=${consent,,}

    if [[ "$consent" != "y" ]]; then
        echo -e "${c_yellow}Canceled by user!${c_reset}"
        exit 0
    fi

    echo -e "[1/2]${c_yellow} Creating vhost config${c_reset}"

    vhost_docroot="/var/www/$projectname$docroot"

    vhost_content=$(cat "$damp_rootdir/apache/vhost.def.conf")
    vhost_content=${vhost_content//"%DAMP_DOCROOT%"/"$vhost_docroot"}
    vhost_content=${vhost_content//"%DAMP_SERVERNAME%"/"$domain"}

    echo "$vhost_content" >"$project_conf"

    if ! [[ -d "$project_dir" ]]; then
        mkdir -p "$project_dir"
        echo "<html><body>$projectname index.html</body></html>" >"$project_dir/index.html"
        echo "<?php phpinfo(); ?>" >"$project_dir/info.php"
    fi

    echo -e "[2/2] ${c_yellow}Restarting apache container${c_reset}"
    restartapache

    echo -e "\n${c_green}$projectname successfully added!${c_reset}"
    echo -e "\nNow:"
    echo -e "- Add '127.0.0.1 $domain' to your /etc/hosts file to access it in your browser.\n"

}

function restartapache {
    cd "$damp_rootdir"
    docker compose restart apache
}

function help {
    echo -e "Docker AMP"
    echo -e "A docker solution with an Apache, MySQL, PhpMyAdmin stack\n"
    echo -e "USAGE: damp <command> [arguments]"

    echo -e "\nCommands"

    content="up${colsep}starts damp container${colsep}"
    content+="\ndown${colsep}stops damp container${colsep}"
    content+="\nbuild${colsep}builds damp container${colsep}"
    content+="\nbuild --no-cache${colsep}builds damp container without cache${colsep}"
    content+="\nlist${colsep}lists all docker container${colsep}"
    content+="\nconnect [name]${colsep}ssh connect to container with [name]${colsep}"

    echo -e "$content" | column -t -s "$colsep"
}

function connect {

    if [[ -z "$1" ]]; then
        echo "No container name provided!"
        exit 1
    fi

    cd "$damp_rootdir"
    docker exec -it "damp_$1" /bin/bash
}

function list {
    docker ps --all
}

function build {
    cd "$damp_rootdir"
    docker compose build "$@"
}

case "$cmd" in
setup) setup ;;
up) up ;;
down) down ;;
build) build "${@:2}" ;;
list | ls) list ;;
connect | c) connect "$2" ;;
add) addvhost "$2" ;;
*) help ;;
esac
